name: 'Release App'

# on:
#   push:
#     tags:
#       - 'v*' 

on: push

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./apps/desktop/package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `penx-v${process.env.PACKAGE_VERSION}`,
              name: `PenX v${process.env.PACKAGE_VERSION}`,
              body: 'A cross-platform productivity App, take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, macos-13, ubuntu-20.04, windows-latest]

    env:
      working-directory: ./apps/desktop

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: install frontend dependencies
        if: matrix.platform == 'macos-latest' || matrix.platform == 'macos-13'
        run: |
          NODE_OPTIONS=--max_old_space_size=8192 pnpm install
          NODE_OPTIONS=--max_old_space_size=8192 npx turbo run build --filter=desktop...

      - name: install frontend dependencies
        if: matrix.platform != 'macos-latest'
        run: |
          pnpm install
          npx turbo run build --filter=desktop...

      - name: install dependencies (mac only)
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin

      - name: Build Tauri App
        if: matrix.platform != 'macos-latest'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

      - name: Build Tauri App (macOS aarch64)
        if: matrix.platform == 'macos-latest'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: --target aarch64-apple-darwin


  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
